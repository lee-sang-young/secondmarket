<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- package 이름이 second로 시작하는 '컨트롤러'들만 스캔한다.-->
	<context:component-scan base-package="second" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
      <!-- LoggerAspect라는 클래스는 Controller, Service, DAO가 실행될 때, 어떤 계층의 어떤 메서드가 
		실행되었는지를 보여주는 역할을 한다. -->  
   <aop:aspectj-autoproxy proxy-target-class="true"/> 
     <bean id="loggerAspect" class="second.common.logger.LoggerAspect" />
     
   <!-- 빈 객체를 사용하는 대신에 맵을 활용해서 파라미터를 수정 추가 등록하는 작업을 하기 위해서 추가 -->
   <!-- HandlerMapping, HandlerAdapter자동 설정 -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="second.common.resolver.CustomMapArgumentResolver"></bean>		
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
    <!-- 전체경로 매핑 /를 사용하기위한 디폴트 서블릿 설정 -->
	<mvc:default-servlet-handler/>
	
	<!--  //각각 path 설정 필요-->
   <mvc:resources mapping="/ckeditor/**" location="/resources/ckeditor/" />
   <mvc:resources mapping="/css/**" location="/resources/css/" cache-period="60" />
   <mvc:resources mapping="/js/**" location="/resources/js/" cache-period="60" />
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean id="loggerInterceptor" class="second.common.logger.LoggerInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
		<!-- @RequestMapping 어노테이션을 활용하여 컨트롤러를 사용하기 위해 빈 추가 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
   
       <!-- 컨트롤러에서 리턴 받은 뷰의 이름과 빈에 등록되어 있는 id의 값이 같은것을 찾아 실행 시킨다 .페이징-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />
    
        <!-- 컨트롤러가 리턴한 객체의 내용을 분석하여 JSON포맷으로 변환. -->
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
   	
   	
   	    <!-- 타일즈 뷰리졸버 설정 -->
   	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
		<property name="order" value="1"></property> 
	</bean>
	
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
		<property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory"/>
	</bean>
    
    <bean
    	class="org.springframework.web.servlet.view.UrlBasedViewResolver" 
    	p:order="2" 
    	p:viewClass="org.springframework.web.servlet.view.JstlView" 
    	p:prefix="/WEB-INF/jsp/" p:suffix=".jsp">
   	</bean>
    <!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
 <bean id="naverLoginBO" class="second.naver.login.NaverLoginBO" /> 
    
</beans>